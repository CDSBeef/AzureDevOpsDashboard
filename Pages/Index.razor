@page "/"
@using AzureDevOpsDashboard.Services
@using AzureDevOpsDashboard.Data
@inject IAzureDevOpsService AzureDevOpsService
@inject ITokenService TokenService
@inject IConfiguration Configuration
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@inject TokenStateService TokenStateService

<PageTitle>Azure DevOps Dashboard</PageTitle>

<div class="container">
    @if (!_tokenVerified)
    {
        <div class="animated-background">
            <div class="shape shape-1"></div>
            <div class="shape shape-2"></div>
            <div class="shape shape-3"></div>
            <div class="shape shape-square shape-square-1"></div>
            <div class="shape shape-square shape-square-2"></div>
            <div class="shape shape-triangle shape-triangle-1"></div>
        </div>
        
        <div class="token-input-container">
            <div class="token-input-card">
                <div class="token-input-logo">
                    <span class="oi oi-lock-locked"></span>
                </div>
                <h1 class="token-input-title">Welcome Back</h1>
                <p class="token-input-subtitle">Enter your Azure DevOps token to continue</p>
                
                <div class="token-input">
                    <input type="password" 
                           @bind="_token" 
                           @bind:event="oninput"
                           placeholder="Enter your PAT token"
                           @onkeypress="@(e => e.Key == "Enter" ? SetToken() : null)" />
                </div>
                
                <button class="token-button" 
                        @onclick="SetToken"
                        disabled="@(string.IsNullOrWhiteSpace(_token))">
                    <span class="oi oi-account-login mr-2"></span>
                    Connect to Azure DevOps
                </button>
    
                @if (!string.IsNullOrEmpty(_error))
                {
                    <div class="alert alert-danger mt-3">@_error</div>
                }
    
                <div class="token-help">
                    Need help? <a href="https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate" target="_blank">Learn how to create a PAT token</a>
                </div>
            </div>
        </div>
    }
    
    @if (_tokenVerified)
    {
        @if (_loading)
        {
            <div class="loading">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (_error != null)
        {
            <div class="alert alert-danger">
                <h4>Error</h4>
                <p>@_error</p>
                <button class="btn btn-primary" @onclick="RefreshData">Retry</button>
            </div>
        }
        else
        {
            <div class="dashboard">
                <div class="section">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Pull Requests (@_pullRequests.Count)</h2>
                        </div>
                        <div class="card-body">
                            @if (_pullRequestsByStatus.Any())
                            {
                                <div style="height: 300px">
                                    <RadzenChart>
                                        <RadzenPieSeries Data="@_pullRequestsByStatus" CategoryProperty="Category" ValueProperty="Count" />
                                    </RadzenChart>
                                </div>
                                <div class="list mt-3">
                                    @foreach (var pr in _pullRequests)
                                    {
                                        <div class="item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="fw-bold">
                                                    <a href="@pr.FormattedUrl" target="_blank">@pr.Title</a>
                                                </span>
                                                <span class="badge bg-primary">@pr.Status</span>
                                            </div>
                                            <div class="text-muted small">
                                                Created by @(pr.CreatedBy?.DisplayName ?? "Unknown") on @pr.CreationDate.ToString("MMM dd, yyyy")
                                            </div>
                                            <div class="text-muted small">
                                                Repository: <a href="@pr.FormattedRepoUrl" target="_blank">@(pr.Repository?.Name ?? "Unknown")</a>
                                            </div>
                                            <div class="text-muted small">
                                                @(GetBranchName(pr.SourceRefName ?? "")) → @(GetBranchName(pr.TargetRefName ?? ""))
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    No pull requests found
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="section">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Build Status (@_builds.Count)</h2>
                        </div>
                        <div class="card-body">
                            @if (_buildsByStatus.Any())
                            {
                                <div style="height: 300px">
                                    <RadzenChart>
                                        <RadzenColumnSeries Data="@_buildsByStatus" CategoryProperty="Category" ValueProperty="Count" />
                                    </RadzenChart>
                                </div>
                                <div class="list mt-3">
                                    @foreach (var build in _builds)
                                    {
                                        <div class="item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="fw-bold">@build.Definition</span>
                                                <span class="badge @(build.Status == "succeeded" ? "bg-success" : "bg-danger")">@build.Status</span>
                                            </div>
                                            <div class="text-muted small">
                                                Started: @build.StartTime?.ToString("MMM dd, yyyy HH:mm")
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    No builds found
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="section">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Release Stages (@_releaseStages.Count)</h2>
                        </div>
                        <div class="card-body">
                            @if (_releaseStages.Any())
                            {
                                <div style="height: 300px">
                                    <RadzenChart>
                                        <RadzenColumnSeries Data="@_releaseStagesByStatus" 
                                                            CategoryProperty="Category" 
                                                            ValueProperty="Count"
                                                            Title="Release Stages" />
                                    </RadzenChart>
                                </div>
                                <div class="list mt-3">
                                    @foreach (var stage in _releaseStages)
                                    {
                                        <div class="item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="fw-bold">@stage.ReleaseName - @stage.StageName</span>
                                                <span class="badge bg-info">@stage.Status</span>
                                            </div>
                                            <div class="text-muted small">
                                                @if (stage.LastReleaseDate.HasValue)
                                                {
                                                    <span>Last Release: @stage.LastReleaseDate.Value.ToString("MMM dd, yyyy HH:mm")</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    No release stages found
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="section">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Releases (@_releases.Count)</h2>
                        </div>
                        <div class="card-body">
                            @if (_releases.Any())
                            {
                                <div class="list mt-3">
                                    @foreach (var release in _releases)
                                    {
                                        <div class="release-item mb-3">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="mb-1">@release.Name</h5>
                                                <small>@release.CreatedOn?.ToString("MMM dd, yyyy HH:mm")</small>
                                            </div>
                                            <div class="text-muted mb-2">Definition: @release.DefinitionName</div>
                                            <div class="stages-list">
                                                @foreach (var stage in release.Stages)
                                                {
                                                    <span class="badge bg-secondary me-2">
                                                        @stage.Name: @stage.Status
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    No releases found
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-secondary" @onclick="RefreshData" disabled="@string.IsNullOrEmpty(_token)">Refresh Data</button>
            </div>
        }
    }
</div>

@code {
    private string _token = string.Empty;
    private List<PullRequest> _pullRequests = new();
    private List<BuildInfo> _builds = new();
    private List<ReleaseStage> _releaseStages = new();
    private List<Release> _releases = new();
    private List<ChartData> _pullRequestsByStatus = new();
    private List<ChartData> _buildsByStatus = new();
    private List<ChartData> _releaseStagesByStatus = new();
    private bool _loading = false;
    private string? _error;
    private bool _tokenVerified = false;

    private class ChartData
    {
        public required string Category { get; set; }
        public int Count { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Initializing dashboard");
            var token = await TokenService.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                _token = token;
                _tokenVerified = true;
                Logger.LogInformation("Token retrieved successfully during initialization");
                await RefreshData();
            }
            else
            {
                Logger.LogInformation("No token found during initialization - waiting for user input"); // Changed from LogWarning to LogInformation
                _tokenVerified = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during initialization");
            _error = ex.Message;
        }
    }

    private async Task SetToken()
    {
        Logger.LogInformation("SetToken button clicked with token length: {Length}", _token?.Length ?? 0);
        try
        {
            if (string.IsNullOrEmpty(_token))
            {
                _error = "Token cannot be empty";
                return;
            }

            _loading = true;
            _error = null;
            
            await TokenService.SetTokenAsync(_token);
            var verifiedToken = await TokenService.GetTokenAsync();
            
            if (string.IsNullOrEmpty(verifiedToken))
            {
                ResetTokenState("Token verification failed");
                return;
            }

            _tokenVerified = true;
            await RefreshData();
            
            TokenStateService.NotifyTokenSet();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ResetTokenState($"Failed to set token: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        if (!_tokenVerified)
        {
            ResetTokenState("Please set a valid token first");
            return;
        }

        try
        {
            _loading = true;
            _error = null;
            Logger.LogInformation("Refreshing dashboard data with verified token");

            // Attempt to get data - if any request fails with 401, reset token
            try
            {
                _pullRequests = await AzureDevOpsService.GetPullRequestsAsync();
                _builds = await AzureDevOpsService.GetBuildsAsync();
                _releaseStages = await AzureDevOpsService.GetReleaseStagesAsync();
                _releases = await AzureDevOpsService.GetReleasesAsync();
            }
            catch (HttpRequestException ex) when (ex.Message.Contains("401"))
            {
                ResetTokenState("Token is invalid or expired. Please enter a valid token.");
                return;
            }

            Logger.LogInformation("Retrieved {Count} pull requests", _pullRequests.Count);
            Logger.LogInformation("Retrieved {Count} builds", _builds.Count);
            Logger.LogInformation("Retrieved {Count} release stages", _releaseStages.Count);
            Logger.LogInformation("Retrieved {Count} releases", _releases.Count);

            _pullRequestsByStatus = _pullRequests
                .GroupBy(pr => pr.Status)
                .Select(g => new ChartData { Category = g.Key, Count = g.Count() })
                .ToList();

            _buildsByStatus = _builds
                .GroupBy(b => b.Status)
                .Select(g => new ChartData { Category = g.Key, Count = g.Count() })
                .ToList();

            // Group release stages by status for the chart
            _releaseStagesByStatus = _releaseStages
                .GroupBy(r => r.Status)
                .Select(g => new ChartData { Category = g.Key, Count = g.Count() })
                .ToList();

            Logger.LogInformation("Data refresh completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing data");
            _error = ex.Message;
            
            // If we get any authorization errors, reset the token state
            if (ex.Message.Contains("Unauthorized") || ex.Message.Contains("401"))
            {
                ResetTokenState("Token is invalid or expired. Please enter a valid token.");
            }
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ResetTokenState(string errorMessage)
    {
        _error = errorMessage;
        _tokenVerified = false;
        _token = string.Empty;
        TokenService.ClearTokenAsync().ConfigureAwait(false);
        TokenStateService.NotifyTokenCleared();
    }

    private string GetBranchName(string refName)
    {
        if (string.IsNullOrEmpty(refName))
            return "Unknown";
        return refName.Replace("refs/heads/", "");
    }
}