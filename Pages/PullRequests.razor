@page "/pullrequests"
@using AzureDevOpsDashboard.Services
@using AzureDevOpsDashboard.Data
@inject IAzureDevOpsService AzureDevOpsService
@inject ITokenService TokenService
@inject NavigationManager NavigationManager

<PageTitle>Pull Requests - Azure DevOps Dashboard</PageTitle>

<div class="section">
    @if (_loading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-danger">
            <h4>Error</h4>
            <p>@_error</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="card-title">Pull Requests (@GetFilteredPullRequests().Count)</h2>
                    <div class="d-flex align-items-center gap-3">
                        <div class="repository-filter">
                            <select class="form-select" @bind="_selectedRepository">
                                <option value="">All Repositories</option>
                                @foreach (var repo in _repositories)
                                {
                                    <option value="@repo">@repo</option>
                                }
                            </select>
                        </div>
                        <button class="btn btn-secondary" @onclick="RefreshData" title="Refresh pull requests">
                            @if (_loading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </span>
                            }
                            else
                            {
                                <span class="oi oi-reload"></span>
                                <span>Refresh</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (GetFilteredPullRequests().Any())
                {
                    <div style="height: 300px">
                        <RadzenChart>
                            <RadzenPieSeries Data="@GetFilteredStatusChart()" CategoryProperty="Category" ValueProperty="Count" />
                        </RadzenChart>
                    </div>
                    <div class="list mt-3">
                        @foreach (var pr in GetFilteredPullRequests())
                        {
                            <div class="item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="fw-bold">
                                        <a href="@pr.FormattedUrl" target="_blank">@pr.Title</a>
                                    </span>
                                    <span class="badge bg-primary">@pr.Status</span>
                                </div>
                                <div class="text-muted small">
                                    Created by @(pr.CreatedBy?.DisplayName ?? "Unknown") on @pr.CreationDate.ToString("MMM dd, yyyy")
                                </div>
                                <div class="text-muted small">
                                    Repository: <a href="@pr.FormattedRepoUrl" target="_blank">@(pr.Repository?.Name ?? "Unknown")</a>
                                </div>
                                <div class="text-muted small">
                                    <a href="@GetBranchUrl(pr, pr.SourceRefName ?? "")" target="_blank">@(GetBranchName(pr.SourceRefName ?? ""))</a>
                                    â†’ 
                                    <a href="@GetBranchUrl(pr, pr.TargetRefName ?? "")" target="_blank">@(GetBranchName(pr.TargetRefName ?? ""))</a>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        No pull requests found
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<PullRequest> _pullRequests = new();
    private HashSet<string> _repositories = new();
    private string _selectedRepository = "";
    private bool _loading = true;
    private string? _error;

    private class ChartData
    {
        public required string Category { get; set; }
        public int Count { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            _loading = true;
            StateHasChanged();  // Add this to show loading state immediately
            
            _pullRequests = await AzureDevOpsService.GetPullRequestsAsync();
            _repositories = new HashSet<string>(_pullRequests
                .Where(pr => pr.Repository?.Name != null)
                .Select(pr => pr.Repository!.Name!)
                .OrderBy(name => name));
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private List<PullRequest> GetFilteredPullRequests()
    {
        return _pullRequests
            .Where(pr => string.IsNullOrEmpty(_selectedRepository) || 
                        (pr.Repository?.Name == _selectedRepository))
            .ToList();
    }

    private List<ChartData> GetFilteredStatusChart()
    {
        return GetFilteredPullRequests()
            .GroupBy(pr => pr.Status)
            .Select(g => new ChartData { Category = g.Key ?? "Unknown", Count = g.Count() })
            .ToList();
    }

    private string GetBranchName(string refName)
    {
        if (string.IsNullOrEmpty(refName))
            return "Unknown";
        return refName.Replace("refs/heads/", "");
    }

    private string GetBranchUrl(PullRequest pr, string refName)
    {
        if (string.IsNullOrEmpty(refName) || pr.Repository?.Name == null)
            return "#";
            
        var branchName = GetBranchName(refName);
        return $"{pr.FormattedRepoUrl}?version=GB{branchName}";
    }
}
