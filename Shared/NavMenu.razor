@using AzureDevOpsDashboard.Services
@inject ITokenService TokenService
@inject TokenStateService TokenStateService
@implements IDisposable

<nav class="top-nav">
    <div class="nav-group">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            Overview
        </NavLink>
    </div>

    @if (_hasToken)
    {
        <div class="nav-group">
            <NavLink class="nav-link" href="pullrequests">
                Pull Requests
            </NavLink>

            <NavLink class="nav-link" href="builds">
                Builds
            </NavLink>

            <NavLink class="nav-link" href="releasestages">
                Release Stages
            </NavLink>

            <NavLink class="nav-link" href="releases">
                Releases
            </NavLink>
        </div>
    }
</nav>

@code {
    private bool _hasToken;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        _hasToken = !string.IsNullOrEmpty(token);
    }

    protected override async Task OnParametersSetAsync()
    {
        var token = await TokenService.GetTokenAsync();
        _hasToken = !string.IsNullOrEmpty(token);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        TokenStateService.OnTokenSet += async () =>
        {
            await InvokeAsync(async () =>
            {
                var token = await TokenService.GetTokenAsync();
                _hasToken = !string.IsNullOrEmpty(token);
                StateHasChanged();
            });
        };
    }

    public void Dispose()
    {
        TokenStateService.OnTokenSet -= async () => await InvokeAsync(async () =>
        {
            var token = await TokenService.GetTokenAsync();
            _hasToken = !string.IsNullOrEmpty(token);
            StateHasChanged();
        });
    }
}