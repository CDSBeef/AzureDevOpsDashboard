@using AzureDevOpsDashboard.Services
@inject ITokenService TokenService
@inject TokenStateService TokenStateService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <span class="oi oi-dashboard" aria-hidden="true"></span>
            Azure DevOps
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Dashboard
            </NavLink>
        </div>
        @if (_hasToken)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="pullrequests">
                    <span class="oi oi-fork" aria-hidden="true"></span> Pull Requests
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="builds">
                    <span class="oi oi-cog" aria-hidden="true"></span> Build Status
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="releasestages">
                    <span class="oi oi-badge" aria-hidden="true"></span> Release Stages
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="releases">
                    <span class="oi oi-box" aria-hidden="true"></span> Releases
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool _hasToken;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        _hasToken = !string.IsNullOrEmpty(token);
    }

    protected override async Task OnParametersSetAsync()
    {
        var token = await TokenService.GetTokenAsync();
        _hasToken = !string.IsNullOrEmpty(token);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        TokenStateService.OnTokenSet += async () =>
        {
            await InvokeAsync(async () =>
            {
                var token = await TokenService.GetTokenAsync();
                _hasToken = !string.IsNullOrEmpty(token);
                StateHasChanged();
            });
        };
    }

    public void Dispose()
    {
        TokenStateService.OnTokenSet -= async () => await InvokeAsync(async () =>
        {
            var token = await TokenService.GetTokenAsync();
            _hasToken = !string.IsNullOrEmpty(token);
            StateHasChanged();
        });
    }
}
